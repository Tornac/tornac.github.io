{"version":3,"sources":["App.tsx","serviceWorker.ts","index.tsx"],"names":["TodoStorage","changeHandlers","todos","this","getPersistentTodos","length","useDummyEntries","localStorage","setItem","LOCAL_STORAGE_KEY","JSON","stringify","handler","push","persistTodos","item","match","find","it","id","Object","assign","toString","console","log","callChangeHandlers","i","splice","getDummyTodos","items","getItem","parse","completed","content","TodoItemComponent","props","className","todo","checkbox","Checkbox","checked","onChange","newTodo","onEdit","IconButton","onClick","onDelete","Icon","FormControlLabel","label","control","App","storage","state","getTodos","newTodoText","addChangeHandler","setState","submitNewTodo","bind","event","preventDefault","upsert","todoItemComponents","map","key","editedTodo","deletedTodo","delete","nrCompleted","filter","nrTotal","onSubmit","TextField","placeholder","value","target","Button","type","variant","color","deleteAll","href","React","Component","Boolean","window","location","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.c2b95d7d.chunk.js","sourcesContent":["import React from 'react';\nimport './App.css';\nimport Button from '@material-ui/core/Button';\nimport {Icon, IconButton} from \"@material-ui/core\";\nimport Checkbox from \"@material-ui/core/Checkbox\";\nimport FormControlLabel from \"@material-ui/core/FormControlLabel\";\nimport TextField from \"@material-ui/core/TextField\";\n\ntype TodoItem = {\n    id: string | null\n    completed: boolean,\n    content: string\n}\n\nclass TodoStorage {\n    private changeHandlers: Array<(items: Array<TodoItem>) => any>;\n    private todos: Array<TodoItem>;\n    private static LOCAL_STORAGE_KEY = \"todo-items\";\n\n    constructor() {\n        this.changeHandlers = [];\n        this.todos = TodoStorage.getPersistentTodos();\n        if (!this.todos || this.todos.length === 0) this.useDummyEntries();\n    }\n\n    private static getPersistentTodos(): Array<TodoItem> {\n        const items = localStorage.getItem(TodoStorage.LOCAL_STORAGE_KEY);\n        console.log(items);\n        if (!items) return [];\n        return JSON.parse(items) as Array<TodoItem>;\n    }\n\n    private persistTodos() {\n        localStorage.setItem(TodoStorage.LOCAL_STORAGE_KEY, JSON.stringify(this.todos));\n    }\n\n    private static getDummyTodos(): Array<TodoItem> {\n        return [\n            {id: \"1\", completed: true, content: \"farm ruby weapon\"},\n            {id: \"2\", completed: true, content: \"clear e5s\"},\n            {id: \"3\", completed: false, content: \"clear e6s\"},\n            {id: \"4\", completed: false, content: \"clear e7s\"},\n            {id: \"5\", completed: false, content: \"clear e8s\"},\n        ];\n    }\n\n    getTodos(): Array<TodoItem> {\n        return this.todos;\n    }\n\n    addChangeHandler(handler: (items: Array<TodoItem>) => any) {\n        this.changeHandlers.push(handler);\n    }\n\n    callChangeHandlers() {\n        this.persistTodos();\n        for (let handler of this.changeHandlers) handler(this.todos);\n    }\n\n    /** insert new TodoItem or update existing one based on item.id */\n    upsert(item: TodoItem) {\n        const match = this.todos.find(it => it.id === item.id);\n        if (match) {\n            Object.assign(match, item);\n        } else {\n            item.id = (this.todos.length + 1).toString();\n            this.todos.push(item);\n        }\n        console.log(match, this.todos);\n        this.callChangeHandlers()\n    }\n\n    delete(item: TodoItem) {\n        for (let i = 0; i < this.todos.length; i++) {\n            const element = this.todos[i];\n            if (element.id === item.id) {\n                this.todos.splice(i, 1);\n                break;\n            }\n        }\n        this.callChangeHandlers();\n    }\n\n    deleteAll() {\n        this.todos.length = 0;\n        this.callChangeHandlers();\n    }\n\n    useDummyEntries() {\n        this.todos = TodoStorage.getDummyTodos();\n        this.callChangeHandlers();\n    }\n}\n\n\nfunction TodoItemComponent(props: {\n    todo: TodoItem,\n    onEdit: (editedTodo: TodoItem) => any,\n    onDelete: (deletedTodo: TodoItem) => any\n}) {\n    // defining event handlers and sub-components separately and putting the pieces together at the end\n    // feels like it makes JSX much more readable by having less indentation levels, but at the same time\n    // spreads the code a lot meaning you have to understand the entire function.\n    // I wonder which is the lesser evil?\n    const onChange = () => {\n        const newTodo = {...props.todo};\n        newTodo.completed = !newTodo.completed;\n        props.onEdit(newTodo);\n    };\n    const className = props.todo.completed ? \"complete\" : \"\";\n    const checkbox = <Checkbox checked={props.todo.completed} onChange={onChange}/>;\n    return (\n        <div className=\"todo-item\">\n            <IconButton onClick={() => props.onDelete(props.todo)}><Icon\n                className=\"deleteIcon\">delete</Icon></IconButton>\n            <FormControlLabel className={className} label={props.todo.content} control={checkbox}/>\n        </div>\n    );\n}\n\ntype AppState = { todos: Array<TodoItem>, newTodoText: string }\n\nclass App extends React.Component<any, AppState> {\n    private storage: TodoStorage;\n\n    constructor(props: any) {\n        super(props);\n        this.storage = new TodoStorage();\n\n\n        this.state = {\n            todos: this.storage.getTodos(),\n            newTodoText: \"\"\n        };\n\n        this.storage.addChangeHandler((todos) => this.setState({todos: todos}));\n\n        this.submitNewTodo = this.submitNewTodo.bind(this);\n    }\n\n    submitNewTodo(event: React.FormEvent) {\n        event.preventDefault();\n        const content = this.state.newTodoText;\n        if (content) this.storage.upsert({completed: false, content: content, id: null});\n        this.setState({newTodoText: \"\"});\n    }\n\n    render(): React.ReactElement<any, string | React.JSXElementConstructor<any>> | string | number | {} | React.ReactNodeArray | React.ReactPortal | boolean | null | undefined {\n        const todoItemComponents = this.state.todos.map(todo =>\n            <li key={todo.id ? todo.id : \"null\"}>\n                <TodoItemComponent\n                    todo={todo}\n                    onEdit={(editedTodo) => this.storage.upsert(editedTodo)}\n                    onDelete={(deletedTodo => this.storage.delete(deletedTodo))}\n                />\n            </li>\n        );\n        const nrCompleted = this.state.todos.filter(it => it.completed).length;\n        const nrTotal = this.state.todos.length;\n        return (\n            <div>\n                <div className=\"todo-app\">\n                    <h1>Todo List Project</h1>\n                    <form onSubmit={this.submitNewTodo}>\n                        <TextField\n                            placeholder=\"new todo note\"\n                            value={this.state.newTodoText}\n                            onChange={event => this.setState({newTodoText: event.target.value})}\n                        />\n                        <Button className=\"new-todo-button\" type=\"submit\" variant=\"contained\"\n                                color=\"primary\">Add</Button>\n                        <div>\n                            <Button onClick={() => this.storage.deleteAll()}>Delete All Entries</Button>\n                            <Button onClick={() => this.storage.useDummyEntries()}>Restore Dummy Entries</Button>\n                        </div>\n                    </form>\n                    <p>Completion progress: {nrCompleted} / {nrTotal}</p>\n                    <ol>{todoItemComponents}</ol>\n                </div>\n                <article className=\"developer-notes\">\n                    <h1>Developer Notes</h1>\n                    <p>\n                        This small project was intended to get a rough idea of React.\n                        I learned how to manage state in React using <code>setState</code>,\n                        how to use JSX templates,\n                        and how to bind event handlers to React component events.\n                    </p>\n                    <p>\n                        Using Typescript with React proved to be easier than expected, as I had previously been told\n                        that it was not well supported.\n                    </p>\n                    <p>\n                        Components like buttons and checkboxes are taken from the library <a\n                        href=\"https://material-ui.com/\">material-ui</a> to get a nice material design look.\n                        This also conveniently afforded me an opportunity to try out reusing existing React components\n                        from libraries which is certainly a powerful tool.\n                    </p>\n                    <p>\n                        Elements of the Todo-List are currently stored persistently with\n                        the <code>localStorage</code> API. However, if no elements exist a set of dummy elements is\n                        loaded instead.\n                    </p>\n                    <p>\n                        An attempt has been made to make the layout responsive, on wider screens it uses a two-column\n                        layout and on smaller ones this section is placed below the actual app.\n                    </p>\n                </article>\n            </div>\n        );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}